# include "vec2.bzz"

# Random Walk parameters
SPEED = 100
MAX_ANGULAR = 0.5
MAX_STEPS_RANDOM = 60

# Obstacle Avoidance Parameters
THRESHOLD = 0.0
ANGULAR_SPEED_AVOID = 1.0
NUM_ROBOTS = 15
DISTANCE_THRESHOLD = 0.4

# Leave Nest Parameters
NEST_THRESHOLD = 0.1

# FSM Parameters
VOID_ZONE = 0
DANGER_ZONE = 2
FOOD_ZONE = 1
NEST_ZONE = 3

# food parameters
FOOD_REWARD = 10
# Experiment format: experiment_{recovery_steps}_{fault_mapping_on}_{random_seed}
FILENAME = "./experiments/experiment_500_0_92"
HEADER = "timestep, food, is_stuck"

# Fault_mapping Parameters
FAULT_MAPPING_ON = 0
RECOVERY_STEPS = 500
IMMUNITY_STEPS = 30

function init() {

	# File initialization
	filename = string.concat(FILENAME, "/results_", string.tostring(id), ".csv")
	result_file = io.fopen(filename, "w")
	io.fwrite(result_file, "timestep,", "food,", "is_stuck")
	io.fclose(result_file)

	# Variable initializations
	math.rng.setseed(id)
	has_food = 0
	is_stuck = 0
	food = 0
	timestep = 0
	recovering = 0
	immunity = 0

	# Initializing the map
	stmg = stigmergy.create(0)

	# Start random walk
	reset_random_walk()

}

function step() {
	if (timestep < 10000){
		write_to_file()
	}

	timestep = timestep + 1

	# If we are stuck, not allowed to do any action and wait for recovery
	if (recovering > 0) {
		recovering = recovering - 1
		return
	}

	# If we have recovered, we are not stuck anymore and we are immune for a short while
	if (is_stuck == 1) { 
		immunity = IMMUNITY_STEPS
		is_stuck = 0
		set_leds(255, 255, 0)
	}

	# If we are immune, continue the random walk
	if (immunity > 0) {
		immunity = immunity - 1
		move_with_avoidance(random_walk)
		return
	}

	current_zone = get_zone(id)
	# If we are in the base, drop food and rotate until we face right
	if (current_zone == NEST_ZONE) {
		# Drop food if we have any
		drop_food()
		# Rotate until facing right
		leave_nest()
	} else if (current_zone == DANGER_ZONE) {
		# Get stuck and send location to neighbours
		set_wheels(0.0, 0.0)
		next_stmg_pos = stmg.size()
		stmg.put(next_stmg_pos, {.x = pose.position.x, .y = pose.position.y})
		is_stuck = 1
		recovering = RECOVERY_STEPS
		set_leds(255, 0, 0)
	} else if (current_zone == FOOD_ZONE or has_food > 0) { 
		# Pick Up food and rotate to left to go back to nest
		if (current_zone == FOOD_ZONE) {
			has_food = has_food + 1
		}
		set_leds(0, 0, 255)
		move_with_avoidance(goto_nest)
	} else if (current_zone == VOID_ZONE) {
		# Walk randomly looking for food
		move_with_avoidance(random_walk)
		set_leds(0, 255, 0)

	}
}

function write_to_file() {
	
	# Open file in append mode
	result_file = io.fopen(filename, "a")

	# Write a line in the file
	io.fwrite(result_file, timestep, ",", food, ",", is_stuck)

	# Close the file
	io.fclose(result_file)
}


# Rotate robot until facing to the left and return to nest
function goto_nest() {
	if ((pose.orientation.yaw < 3.0) and (pose.orientation.yaw > -3.0)) { 
		if (pose.orientation.yaw < 0) {
			set_wheels(10.0, -5.0)
		} else {
			set_wheels(-5.0, 10.0)
		}
	} else {
		gotop(SPEED, 0.0)
	}
}

# Get out of the nest by rotating towards the right and going straight
function leave_nest() {
	if (pose.orientation.yaw > NEST_THRESHOLD or pose.orientation.yaw < -NEST_THRESHOLD) { 
		if (pose.orientation.yaw < 0) {
			set_wheels(-10.0, 10.0)
		} else {
			set_wheels(10.0, -10.0)
		}
	} else {
		gotop(SPEED, 0.0)
	}
}

# Drop food and gain food
function drop_food() {
	if (has_food) {
		food = food + FOOD_REWARD * has_food
		has_food = 0
	}
}


# Perform a random walk with obstacle avoidance
function move_with_avoidance(desired_move) {
	index = check_avoidance()
	if (index == -1) {
		danger_zone = check_danger_zone()
		if (danger_zone.x != 1000.0 and danger_zone.y != 1000.0 and FAULT_MAPPING_ON == 1) {
			forward_vec = {.x = pose.position.x + (0.3 * math.cos(pose.orientation.yaw)), 
						   .y = pose.position.y + (0.3 * math.sin(pose.orientation.yaw))}
			vec_robot = vec_sub(forward_vec, pose.position)
			vec_danger = vec_sub(danger_zone, pose.position)
			cross = vec_cross(vec_robot, vec_danger)
			dot = vec_dot(vec_robot, vec_danger)
			if (cross > 0) {
				angular_vel_avoid = -ANGULAR_SPEED_AVOID 
			} else {
				angular_vel_avoid = ANGULAR_SPEED_AVOID
			}
			if (dot > 0) {
				gotop(SPEED / 4.0, angular_vel_avoid)
			} else {
				desired_move()
			}
		} else {
			desired_move()
		}
	} else {
		if (index < 4) {
			angular_vel_avoid = -ANGULAR_SPEED_AVOID
		} else {
			angular_vel_avoid = ANGULAR_SPEED_AVOID
		}
		gotop(SPEED / 4.0, angular_vel_avoid)
	}
}

function check_danger_zone() {
	var smallest_distance = 1000.0
	var closest_point = {.x = 1000.0, .y = 1000.0}
	for (i=0, i<stmg.size(), i=i+1) {
		if (i != id) {
			danger_zone = stmg.get(i)
			if (danger_zone != nil) {
				if (danger_zone.x != 1000.0 and danger_zone.y != 1000.0) {
					dist = vec_distance(danger_zone, {.x = pose.position.x, .y = pose.position.y})
					if (dist < smallest_distance and dist < DISTANCE_THRESHOLD) {
						smallest_distance = dist
						closest_point = danger_zone
					}
				}
			}
		}
	}
	return closest_point
}

function vec_cross(vec_1, vec_2) {
	return (vec_1.x * vec_2.y) - (vec_1.y * vec_2.x)
}

function vec_sub(vec_1, vec_2) {
	return {.x = vec_1.x - vec_2.x, .y = vec_1.y - vec_2.y}
}

function vec_distance(vec_1, vec_2) {
	return math.sqrt((vec_1.x - vec_2.x) * (vec_1.x - vec_2.x) + (vec_1.y - vec_2.y) * (vec_1.y - vec_2.y))
}

function vec_dot(vec_1, vec_2) {
	return vec_1.x * vec_2.x + vec_1.y * vec_2.y
}

# Action to move according to a Random Walk
function random_walk() {
  random_steps = random_steps + 1
  if (random_steps <= next_random_update) {
    current_angular_vel = angular_vel * gaussian(random_steps - (next_random_update / 2))
  } else {
    current_angular_vel = reset_random_walk()
  }
  gotop(SPEED, current_angular_vel)
}

# Function to reset random walk
function reset_random_walk() {
  next_random_update = math.rng.uniform(MAX_STEPS_RANDOM-10, MAX_STEPS_RANDOM)
  angular_vel = math.rng.uniform(-MAX_ANGULAR, MAX_ANGULAR)
  random_steps = 0
  return angular_vel
}

# Find the nearest obstacle and turn accordingly
function check_avoidance() {
	max_val = THRESHOLD
	max_idx = -1

	for (i=0, i<8, i=i+1) {
		if (proximity[i].value > max_val) {
			max_val = proximity[i].value
			max_idx = i
		}
	}
	return max_idx
}

# Compute a gaussian centered at 0, with std c and height 1
function gaussian(x) {
  a = 1.0
  c = 10.0
  res = math.exp(-(x * x) / (2.0 * c * c))
  return res
}

# Log only for a specific robot
function logg(str, rid) {
  if (id == rid) {
    log(str)
  }
}

function reset() {}

function destroy() {}
